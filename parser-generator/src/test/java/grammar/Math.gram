+package grammar.generated

|> expr -> Integer

expr() -> Integer :=
    term sum({ _term1 }) {
        return _sum1
    }
    ;

sum(Integer i) -> Integer :=
    { return i }
    | PLUS term sum({ i + _term1 }) {
        return _sum1
    }
    | MINUS term sum({ i - _term1 }) {
        return _sum1
    }
    ;

term() -> Integer :=
    pterm mul({ _pterm1 }) {
        return _mul1
    }
    ;

mul(Integer i) -> Integer :=
    { return i }
    | MUL pterm mul({ i * _pterm1 }) {
        return _mul1
    }
    ;

pterm() -> Integer :=
    fact pow({ _fact1 }) {
        return _pow1
    }
    ;

pow(Integer i) -> Integer :=
    { return i }
    | POW pterm pow({ (int) Math.pow(i, _pterm1) }) {
        return _pow1
    }
    ;

fact() -> Integer :=
    L_PAR expr R_PAR {
        return _expr1
    }
    | number {
        return _number1
    }
    ;

number() -> Integer :=
    MINUS {
        return -1 * number()
    }
    | HEX NUMBER {
        return Integer.parseInt(_NUMBER1, 16)
    }
    | NUMBER {
        return Integer.parseInt(_NUMBER1)
    }
    ;

HEX := '0x';

NUMBER := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
        | 'a' | 'b' | 'c' | 'd' | 'e' | 'f';

PLUS := '+';

MINUS := '-';

MUL := '*';

POW := '^';

L_PAR := '(';

R_PAR := ')';
